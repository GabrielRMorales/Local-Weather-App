{"version":3,"sources":["DisplayWeather.js","AppMethods.js","ManageWeather.js","App.js","serviceWorker.js","index.js"],"names":["DisplayWeather","props","class","weather","day","src","icon","low","high","convertTemp","require","config","scale","temp","tempInF","Math","round","noRepeatDays","arr","dayToCheck","filter","data","forecastDay","dt_txt","split","ManageWeather","state","fiveDayForecast","handleClick","bind","axios","get","then","res","list","slice","setState","map","dailyData","date","Date","getDay","main","temp_min","temp_max","this","onClick","weatherProps","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4PAWeA,EATQ,SAACC,GACpB,OAAO,6BACH,wBAAIC,MAAM,OAAOD,EAAME,QAAQC,KAC/B,yBAAKC,IAAG,2CAAsCJ,EAAME,QAAQG,KAApD,aACR,yBAAKJ,MAAM,OAAOD,EAAME,QAAQI,IAAhC,QACA,yBAAKL,MAAM,QAAQD,EAAME,QAAQK,KAAjC,U,gBC0BFC,GAhCSC,EAAQ,IAAUC,SAgCf,SAACC,EAAOC,GACxB,MAAiB,MAAVD,EAAgBC,GALPC,EAKwBD,EAJjCE,KAAKC,MAAwB,EAAE,GAAnBF,EAAU,MADd,IAACA,IAQZG,EAAa,SAACC,GAChB,IAAIC,EACJ,OAAOD,EAAIE,QAAO,SAACC,GACjB,IAAIC,EAAYD,EAAKE,OAAOC,MAAM,KAAK,GACvC,GAAIL,IAAaG,EAEf,OADAH,EAAWG,EACJD,MCqBAI,E,kDA3Db,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,gBAAiB,GACjBf,MAAO,KAET,EAAKgB,YAAY,EAAKA,YAAYC,KAAjB,gBANN,E,qDASb,WAAoB,IAAD,ODRVC,IAAMC,IAAI,2BAA2BC,MAAK,SAAAC,GAC/C,OAAOH,IAAMC,IAAI,wDAAwDE,EAAIZ,KAAJ,IAAxD,iDAChBW,MAAK,SAASC,GACb,OAAOhB,EAAagB,EAAIZ,KAAKa,MAAMC,MAAM,EAAE,MCMlCH,MAAK,SAAA7B,GAChB,EAAKiC,SAAS,CACdT,gBAAiBxB,EAAQkC,KAAI,SAASC,GAErC,MAAO,CAAClC,KDNKmC,ECMaD,EAAUf,OAAOC,MAAM,KAAK,GDJ5C,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAGM,IAAIgB,KAAKD,GACDE,WCNNnC,KAAMgC,EAAUnC,QAAQ,GAAGG,KAC3BC,IAAKQ,KAAKC,MAAM,IAAAsB,EAAUI,KAAKC,UAAkB,IACjDnC,KAAMO,KAAKC,MAAM,IAAAsB,EAAUI,KAAKE,UAAkB,KDT7C,IAACL,Y,yBCiBlB,WACEM,KAAKT,UAAS,SAACV,GACb,MAAkB,MAAdA,EAAMd,MACD,CAACA,MAAO,KAGR,CAACA,MAAO,U,oBAKnB,WAAS,IAAD,OACN,OAAQ,6BACN,yBAAKkC,QAASD,KAAKjB,aAAa,0BAAM1B,MAA4B,MAArB2C,KAAKnB,MAAMd,MAAgB,SAAW,IAAnD,UAAhC,IACA,0BAAMV,MAA4B,MAArB2C,KAAKnB,MAAMd,MAAgB,SAAU,IAAlD,UACE,wBAAIV,MAAM,gBAEL2C,KAAKnB,MAAMC,gBAAgBU,KAAI,SAAChB,GAC/B,IAAI0B,EAAa,CAAC3C,IAAKiB,EAAKjB,IAC5BE,KAAMe,EAAKf,KACXC,IAAKE,EAAY,EAAKiB,MAAMd,MAAOS,EAAKd,KACxCC,KAAMC,EAAY,EAAKiB,MAAMd,MAAOS,EAAKb,OAGzC,OAAO,wBAAIN,MAAM,iBACjB,kBAAC,EAAD,CAAgBC,QAAS4C,c,GAnDbC,IAAMC,WCWnBC,MAVf,WAEE,OACE,yBAAKC,UAAU,OACX,iDACA,kBAAC,EAAD,QCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cca20e59.chunk.js","sourcesContent":["import React from \"react\";\n\nconst DisplayWeather = (props)=>{\n    return <div>\n        <h2 class=\"day\">{props.weather.day}</h2>\n        <img src={`http://openweathermap.org/img/wn/${props.weather.icon}@2x.png`}/>\n        <div class=\"low\">{props.weather.low}&deg;</div>\n        <div class=\"high\">{props.weather.high}&deg;</div>\n    </div>;\n}\n\nexport default DisplayWeather;","import axios from \"axios\";\nconst dotenv = require(\"dotenv\").config();\n\nconst getWeather=()=>{\n    const key=\"36584e7259790df669629497aec20cbc\";\n    //process.env.KEY;      \n    return axios.get(\"https://ip-api.com/json\").then(res=>{\n      return axios.get(\"https://api.openweathermap.org/data/2.5/forecast?zip=\"+res.data[\"zip\"]+\",us&appid=\"+key);\n    }).then(function(res){\n        return noRepeatDays(res.data.list).slice(0,5);\n    });\n}\n\nconst convertToDay=(date)=>{\n\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday'\n    ];\n\n    let day=new Date(date);\n    return days[day.getDay()];\n  }\n\nconst getCelsius=(tempInF)=>{\n  return Math.round((tempInF - 32) * (5/9));\n}\n\nconst convertTemp=(scale, temp)=>{\n  return scale === \"f\" ? temp: getCelsius(temp);\n}\n\nconst noRepeatDays=(arr)=>{\n    let dayToCheck;\n    return arr.filter((data)=>{\n      let forecastDay=data.dt_txt.split(\" \")[0];\n      if (dayToCheck!==forecastDay){\n        dayToCheck=forecastDay;\n        return data;\n      }\n    });\n  }\n\n\nexport {convertToDay, convertTemp, noRepeatDays, getWeather};","import React from \"react\";\nimport DisplayWeather from \"./DisplayWeather\";\nimport {convertToDay, getWeather, convertTemp} from \"./AppMethods\";\n\nclass ManageWeather extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      fiveDayForecast: [],\n      scale: \"f\"\n    };\n    this.handleClick=this.handleClick.bind(this);\n  }\n\n  componentDidMount(){\n    getWeather().then(weather=>{\n      this.setState({\n      fiveDayForecast: weather.map(function(dailyData){\n\n       return {day: convertToDay(dailyData.dt_txt.split(\" \")[0]),\n              icon: dailyData.weather[0].icon,\n              low: Math.round(dailyData.main.temp_min*(9/5)) - 459,\n              high: Math.round(dailyData.main.temp_max*(9/5)) - 459\n      }\n\n        })\n      })  \n    });\n  }\n\n  handleClick(){\n    this.setState((state)=>{\n      if (state.scale===\"c\") {\n        return {scale: \"f\"}\n      }\n      else {\n        return {scale: \"c\"}\n      }\n    });\n    }\n\n    render(){\n      return (<div>\n        <div onClick={this.handleClick}><span class={this.state.scale === \"c\" ? \"active\" : \"\"}>C&deg; </span>/ \n        <span class={this.state.scale === \"f\" ? \"active\": \"\"}>F&deg;</span></div>\n          <ul class=\"main-display\">\n              {                \n               this.state.fiveDayForecast.map((data)=>{\n                let weatherProps={day: data.day,\n                icon: data.icon,\n                low: convertTemp(this.state.scale, data.low),\n                high: convertTemp(this.state.scale, data.high)\n              };\n  \n                return <li class=\"weather-today\">\n                <DisplayWeather weather={weatherProps} />\n              </li>;\n            })}\n          </ul>\n        </div>);\n    }\n  \n}\n\nexport default ManageWeather;","import React from 'react';\nimport './App.css';\nimport \"./ManageWeather\";\nimport ManageWeather from './ManageWeather';\n\nfunction App() {  \n  \n  return (\n    <div className=\"App\">\n        <h1>Five-Day Forecast</h1>\n        <ManageWeather/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}